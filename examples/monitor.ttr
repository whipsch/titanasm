# This is the basic MonitorOS for Titan.
# When assembled and the binary entered into Titan's memory, MonitorOS will show '>' prompt at the serial terminal
# Bytes can be loaded into memory by typing a two byte address in hex, then a space, then the byte to be dumped.
#
# The below example shows 0xFE being entered into the address 0x0F07.
#
# > 0F07 FE
# >
#
# Currently there are three "commands" '/' 'C' and ' '
# 
# 'R' - Read byte
# 'W' - Write byte (followed by a byte to write)
# 'C' - Clear byte
#
# This file is the MonitorOS for Marc Cleave's Titan Processor
# Copyright (C) 2012 Marc Cleave, bootnecklad@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

orrg :BEGIN # NOT IMPLEMENTED IN ASSEMBLER YET

word :SERIAL_PORT_0, 0xFFFF # still need to decide which address the serial port will be at
data :HASH_TABLE,       "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x00\x00\x00\x00\x00\x00\x00\x0A\x0B\x0C\x0D\x0E\x0F"
data :HASH_TABLE_BYTE,  "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x00\x00\x00\x00\x00\x00\x00\x41\x42\x43\x44\x45\x46"

label :BEGIN
  ldc R0, 0x0A            # ASCII value for LF (Line feed)
  stm R0, :SERIAL_PORT_0  # Outputs to terminal
  ldc R0, 0x0D            # ASCII value for CR (Carriage return)
  stm R0, :SERIAL_PORT_0  # Outputs to terminal
  ldc R0, 0x3E            # ASCII value for '>'
  stm R0, :SERIAL_PORT_0  # Outputs to terminal

label :GET_INPUT
  ldc R1, 0x05            # Number of bytes of input to get
  ldc R2, 0x01            # Value need for incrementing/decrementing
  ldm R0, :SERIAL_PORT_0  # Gets byte from input
  tst R0                  # test to see if byte contains anything (if not, nothing was fetched)
  jpz :GET_INPUT          # try again
  ldc RF, 0x1B            # ASCII value for ESC (Escape)
  xor R0, RF              # Checks if input byte was an ESC
  jpz :BEGIN              # If the byte was an ESC, return to '>' prompt
  sub R2, R1              # Decrement byte count
  psh R0                  # Pushes byte onto stack
  jpz :PARSE_INPUT        # No more bytes to fetch so lets parse them!
  jmp :GET_INPUT          # Get another byte

label :PARSE_INPUT
  pop R0        # Pops latest value off the stack
  ldc R1, 0x2F  # ASCII value for '/' this is a READ command
  xor R0, R1    # Checks if byte is a '/'
  jpz :READ     # Goes off to create address, read memory and output
  ldc R1, 0x43  # ASCII value for 'C' this is a CLEAR command
  xor R0, R1    # Checks if byte is a 'C'
  jpz :CLEAR    # Goes off to create address and write a 00
  ldc R1, 0x20  # Ascii value for ' ' this is a WRITE command
  xor R0, R1    # Checks if byte is a space
  jpz :BYTE     # Need to get two more bytes of input
  nop           # Its really easy to add functions to this program!
  jmp :BEGIN    # Obviously it was an invalid character and the user forgot to press ESC.

label :READ
  jsr :CREATE_ADDRESS       # Creates address from ASCII
  ldi R0, [R1, R2]          # Loads the byte to be read, uses indexed load with NO offset, address in R1 and R2.
  psh R0                    # Saves byte before manipulation
  ldc R1, 0x0F              # Part of byte to remove
  and R0, R1                # Upper nybble removed, ie bits UNSET, lower nybble left intact
  ldi R2, :HASH_TABLE_BYTE  # Data byte used to fetch the ASCII equvilent, ie if data is 0x5 then 0x35 is needed to be output to terminal
  pop R0
  shr R1
  shr R1
  shr R1
  shr R1                    # Shift the byte right four times, moves data to lower nybble
  ldc R1, 0xF0
  and R0, R1                # Lower nybble removed, bits set to 0
  ldi R3, :HASH_TABLE_BYTE  # Data -> ASCII complete
  sti R3, :SERIAL_PORT_0    # Output high ASCII byte to serial terminal
  sti R2, :SERIAL_PORT_0    # Outputs low ASCII byte
  jmp :BEGIN

label :CREATE_ADDRESS
  pop RA
  pop RB        # DONT BEAK THE RETURN ADDRESS!
  pop R1        # Low nybble of low address
  ldc R0, 0x30  # Remove constant from ASCII value, makes table smaller.
  sub R0, R1    # R1 = R1 - R0
  ldi R2, :HASH_TABLE
  pop R1        # High nybble of low address
  sub R0, R1    # Removes constant
  ldi R3, :HASH_TABLE
  add R3, R2    # Combines high and low nybbles to create low byte of address
  pop R1        # Low nybble of high address
  sub R0, R1
  ldi R3, :HASH_TABLE
  pop R1        # High nybble of high address
  sub R0, R1
  ldi R4, :HASH_TABLE
  add R4, R3    # Combines high and low nybbles to create high byte of address
  mov R3, R1    # Puts high byte address in correct place
  psh RB
  psh RA        # PUTS BACK RETURN ADDRESS :)
  rtn

label :CLEAR
  jsr :CREATE_ADDRESS # Creates address from ASCII input
  clr R0              # Clears R0
  sti R0, [R1, R2]    # Indexed store to memory, uses address in registers
  jmp :BEGIN          # That was quick!

label :BYTE
  pop R1              # Low nybble of data
  ldc R0, 0x30        # Remove constant from ASCII value, makes table smaller.
  sub R0, R1          # R0 = R0 - R1
  ldi R2, :HASH_TABLE # Value of low nybble in R2
  pop R0              # High nybble of data
  sub R1, R0          # Removes constant
  ldi R3, :HASH_TABLE # Value of high nybble in R3
  add R3, R2          # Combines high and low nybbles to create low byte of address
  mov R2, R0
  jsr :CREATE_ADDRESS
  sti R0, [R1, R2]    # Uses address in R1(high byte) and R2(low byte)
  jmp :BEGIN
